//// 
//// Autogenerated by xlw 
//// Do not edit this file, it will be overwritten 
//// by InterfaceGenerator 
////

#include "xlw/MyContainers.h"
#include <xlw/CellMatrix.h>
#include <stdexcept>
using namespace xlw;





double  //  Normal model option value
mxlw_NormalOptionValue		(
		double T, // The maturity of the option
		double F_0, // The current forward swap rate
		double K, // The strike
		double sigma, // The volatility of the underlying
		bool isCall // Whether it is a call or put
 );
double  //  Calculate the vega of the normal model
mxlw_NormalOptionValueDeriv		(
		double T, // The maturity of the option
		double F_0, // The current forward swap rate
		double K, // The strike
		double sigma, // The volatility of the underlying
		bool isCall // Whether it is a call or put
 );
double  // Lognormal model option value
mxlw_LognormalOptionValue		(
		double T, // The maturity of the option
		double F_0, // The current forward swap rate
		double K, // The strike
		double sigma, // The volatility of the underlying
		bool isCall // Whether it is a call or put
 );
double  // Convert Lognormmal vol to Normal vol using the Newton's method
mxlw_ConvertLognormalToNormalVol		(
		double lognormalOptionPrice, // The option price from the Black model
		double T, // The maturity of the option
		double F_0, // The current forward swap rate
		double K, // The strike
		bool isCall // Whether it is a call or put
 );
double  // Get the SABR implied normal volatility
mxlw_SABRImpliedNormalVol		(
		double T, // The maturity of the option
		double F_0, // The current forward swap rate
		double K, // The strike
		double sigma, // The vol_0
		double alpha, // alpha in the SABR model
		double beta, // beta in the SABR model
		double rho // rho in the SABR model
 );
double  // Get the SABR implied log normal volatility
mxlw_SABRImpliedLogNormalVol		(
		double T, // The maturity of the option
		double F_0, // The current forward swap rate
		double K, // The strike
		double sigma, // The vol_0
		double alpha, // alpha in the SABR model
		double beta, // beta in the SABR model
		double rho // rho in the SABR model
 );
double  // Monte Carlo Simulation for SABR model
mxlw_MonteCarloGetSABROptionPrice		(
		double T, //too lazy to comment this one
		double F_0, // The current forward swap rate
		double K, // The strike
		double sigma, // The vol_0
		double alpha, // alpha in the SABR model
		double beta, // beta in the SABR model
		double rho, // rho in the SABR model
		bool isCall, //Whether it is a call or put
		int numOfPath, // Number of Monte Carlo simulation paths
		int stepsInYear // Number of time step in one path
 );
